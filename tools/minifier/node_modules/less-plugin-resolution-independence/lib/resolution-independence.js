// Adding a "plugin" that works with LESS 1.7, for converting pixel measurements to resolution
// independent units i.e. rems.
;(function(){

    var less;
    if (typeof window != 'undefined') {
        less = window.less || {};
    } else {
        less = require("less");
    }

    var ResolutionIndependence = function(opts) {
        this._baseSize = opts && opts.baseSize || this._baseSize;
        this._riUnit = opts && opts.riUnit || this._riUnit;
        this._unit = opts && opts.unit || this._unit;
    };
    ResolutionIndependence.prototype = {
        _baseSize: 12,
        _riUnit: 'rem',
        _unit: 'px',
        _ignoreUnit: 'apx', // "absolute" px
        run: function (root) {

			console.log('hey');

			this._visitor = this._visitor || new less.tree.visitor(this);
            return this._visitor.visit(root);
        },
        visitRule: function (node) {
            var values = node && node.value && node.value.value && node.value.value.length && node.value.value[0],
                i;

            if (values) {
                if (Array.isArray(values.value)) {
                    for (i = 0 ; i < values.value.length; i++) {
                        this.parseValue(values.value[i]);
                    }
                } else {
                    this.parseValue(values);
                }
            }
            return node;
        },
        parseValue: function (valueNode) {
            if (valueNode.value && valueNode.value.toString().indexOf(this._ignoreUnit) != -1) {
                valueNode.value = parseInt(valueNode.value, 10) + this._unit;
            } else if (valueNode.value && valueNode.value.toString().indexOf(this._unit) != -1) {
                valueNode.value = parseInt(valueNode.value, 10) / this._baseSize + this._riUnit;
            } else if (valueNode.unit && valueNode.unit.numerator && valueNode.unit.numerator.length &&
                valueNode.unit.numerator[0] == this._unit) {
                valueNode.value = valueNode.value / this._baseSize;
                valueNode.unit.numerator[0] = this._riUnit;
            }
        }
    };

    if (typeof window != 'undefined') {
		window.enyoLessRiPlugin = ResolutionIndependence;
    } else {
        module.exports = ResolutionIndependence;
    }

}());